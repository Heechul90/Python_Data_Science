### 데이터프레임 클래스
import pandas as pd
import numpy as np

## 데이터프레임(Data-Frame) 클래스는 2차원 행렬 데이터에 인덱스를 붙인 것과 비슷하다.
## 2차원이므로 각각의 행 데이터의 이름이 되는 행방향 인덱스(row index) 뿐 아니라
## 각각의 열 데이터의 이름이 되는 열방향 인덱스(column index)도 붙일 수 있다.

## 데이터프레임 생성¶

# 우선 하나의 열이 되는 데이터를 리스트나 일차원 배열을 준비한다.
# 이 각각의 열에 대한 이름(라벨)을 키로 가지는 딕셔너리를 만든다.
# 이 데이터를 DataFrame 클래스 생성자에 넣는다.
#    동시에 열방향 인덱스는 columns 인수로,
#    행방향 인덱스는 index 인수로 지정한다.

data = {
    "2015": [9904312, 3448737, 2890451, 2466052],
    "2010": [9631482, 3393191, 2632035, 2431774],
    "2005": [9762546, 3512547, 2517680, 2456016],
    "2000": [9853972, 3655437, 2466338, 2473990],
    "지역": ["수도권", "경상권", "수도권", "경상권"],
    "2010-2015 증가율": [0.0283, 0.0163, 0.0982, 0.0141]}
columns = ["지역", "2015", "2010", "2005", "2000", "2010-2015 증가율"]
index = ["서울", "부산", "인천", "대구"]
df = pd.DataFrame(data, index=index, columns=columns)
df


# 시리즈와 마찬가지로 데이터만 접근하려면 values 속성을 사용한다.
# 열방향 인덱스와 행방향 인덱스는 각각 columns, index 속성으로 접근한다.
df.values
df.columns
df.index

# 시리즈에서 처럼 열방향 인덱스와 행방향 인덱스에 이름을 붙이는 것도 가능
df.index.name = "도시"
df.columns.name = "특성"
df


# 데이터프레임은 전치(transpose)를 포함하여
# NumPy 2차원 배열이 가지는 대부분의 속성이나 메서드를 지원
df.T



## 열 데이터의 갱신, 추가, 삭제¶
## 데이터프레임은 열 시리즈의 딕셔너리으로 볼 수 있으므로
## 열 단위로 데이터를 갱신하거나 추가, 삭제할 수 있다.
df["2010-2015 증가율"] = df["2010-2015 증가율"] * 100
df

df["2005-2010 증가율"] = ((df["2010"] - df["2005"]) / df["2005"] * 100).round(2)
df

del df["2010-2015 증가율"]
df



## 열 인덱싱¶
## 데이터프레임을 인덱싱을 할 때도 열 라벨(column label)을 키값으로 생각하여
## 인덱싱을 할 수 있다.
df["지역"]
df[["2010", "2015"]]

df[["2010"]]
type(df[["2010"]])

df["2010"]
type(df["2010"])

# 정수 인덱스를 넣으면 KeyError 오류가 발생
try:
    df[0]
except Exception as e:
    print(type(e))

# 다만 원래부터 문자열이 아닌 정수형 열 인덱스를 가지는 경우에는 인덱스 값으로 정수를 사용할 수 있다.
df2 = pd.DataFrame(np.arange(12).reshape(3, 4))
df2

df2[2]
df2[[1, 2]]


## 행 인덱싱
## 만약 행 단위로 인덱싱을 하고자 하면 항상 슬라이싱(slicing)을 해야 한다.
## 인덱스의 값이 문자 라벨이면 라벨 슬라이싱도 가능하다.

df[:1]
df[1:2]
df[1:3]
df["서울":"부산"]


## 개별 데이터 인덱싱¶
## 데이터프레임에서 열 라벨로 시리즈를 인덱싱하면 시리즈가 된다.
## 이 시리즈를 다시 행 라벨로 인덱싱하면 개별 데이터가 나온다.

df["2015"]["서울"]
